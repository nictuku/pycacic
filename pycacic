#!/usr/bin/env python
# -*- coding: utf-8 -*-

#   Copyright (C) 2006 José de Paula Eufrásio Junior (jose.junior@gmail.com) AND
#                      Yves Junqueira (yves.junqueira@gmail.com)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

"""Atualmente utilizado apenas para testar módulos e testar
metodologias e estruturas.
"""

# Algoritmo:

# x) MAIN: Verificar parâmetros de execução
#
# x) COMM: Consultar no servidor quais informações
# devem ser enviadas
#
# x) MAIN: Se necessário (conforme x e x), iniciar modo de coleta de informações
# de hardware
#
# x.1) COMM: Consultar no servidor o nome dos campos de patrimônio
#
# x) SYSINFO: Coletar informações de sistema
#
# - Caso haja alteração, marcar como "updated"
#
# x.1) Rede
# x.2) Hardware
# x.3) Software
#
# x) COMM: Enviar informações se forem novas ou atualizadas
#


import logging
import logging.handlers

# Formato de data alternativa
#format = "%(asctime)s cacic[%(process)d] %(levelname)s \
#%(name)s:%(lineno)d: %(message)s"

# Log para stdout
#format = "%(asctime)s %(levelname)s %(message)s"
#log = logging.getLogger("cacic")
#log.setLevel(logging.DEBUG)
#ch = logging.StreamHandler()
#ch.setLevel(logging.DEBUG)
#formatter = logging.Formatter(format)
#ch.setFormatter(formatter)
#log.addHandler(ch)

# necessario?
#sysinfo_log = logging.getLogger("sysinfo")
#sysinfo_log.setLevel(logging.DEBUG)
#ch = logging.StreamHandler()
#ch.setLevel(logging.DEBUG)
#formatter = logging.Formatter(format)
#ch.setFormatter(formatter)
#sysinfo_log.addHandler(ch)
  
log = logging.getLogger()

hdlr = logging.handlers.SysLogHandler(
  "/dev/log",facility=logging.handlers.SysLogHandler.LOG_DAEMON)

formatter = logging.Formatter(
"pycacic[%(process)d] %(levelname)s %(message)s"
    )
hdlr.setFormatter(formatter)
log.addHandler(hdlr)
log.setLevel(logging.INFO)


log.info("Starting PyCACIC.")
log.debug("Loading agent.http")

from cacic import agent
from cacic.agent import config

helloCACIC = agent.http

log.debug("Loading cacic.agent.config.load()")
cacic = config.load()
#print "config:", cacic.remote_cfg
info = cacic.info
soft_info = cacic.software_info
share_info = cacic.share_info
patr_info = cacic.patr_info

log.info("Getting configuration from the server")
helloCACIC.post_info(info,'cacic','cacic2/ws/get_config.php')

log.info("Posting network information")
helloCACIC.post_info(info,'cacic','cacic2/ws/set_tcp_ip.php')

log.info("Posting hardware information")
helloCACIC.post_info(info,'cacic','cacic2/ws/set_hardware.php')

log.info("Posting software information")
helloCACIC.post_info(soft_info, 'cacic','cacic2/ws/set_software.php')

log.info("Posting SMB shares information")
helloCACIC.post_info(share_info, 'cacic','cacic2/ws/set_compart.php')

log.info("Posting Patrimony data")
helloCACIC.post_info(patr_info, 'cacic','cacic2/ws/set_patrimonio.php')

log.info("Finished execution sucessfuly")

print cacic.patr_info
